
// Fonction utilitaire pour convertir un ArrayBuffer en base64
function arrayBufferToBase64(buffer) {
    let binary = '';
    const bytes = new Uint8Array(buffer);
    bytes.forEach(b => binary += String.fromCharCode(b));
    return window.btoa(binary);
}

// Fonction utilitaire pour convertir une chaîne base64 en Uint8Array
function base64ToArrayBuffer(base64) {
    const binary = window.atob(base64);
    const bytes = new Uint8Array(binary.length);
    for (let i = 0; i < binary.length; i++) {
        bytes[i] = binary.charCodeAt(i);
    }
    return bytes;
}

async function decryptAuthKey(password, encryptedData) {
    const decoder = new TextDecoder();
    const encoder = new TextEncoder();

    // Convertir la chaîne JSON en objet
    const data = JSON.parse(encryptedData);

    // Récupérer le sel, l'IV et le ciphertext depuis l'objet
    const salt = base64ToArrayBuffer(data.salt);
    const iv = base64ToArrayBuffer(data.iv);
    const iterations = data.iterations;
    const ciphertext = base64ToArrayBuffer(data.ciphertext);

    // Importer le mot de passe pour PBKDF2
    const passwordKey = await crypto.subtle.importKey(
        'raw',
        encoder.encode(password),
        { name: 'PBKDF2' },
        false,
        ['deriveKey']
    );

    // Dériver à nouveau la clé AES-GCM
    const key = await crypto.subtle.deriveKey(
        {
        name: 'PBKDF2',
        salt: salt,
        iterations: iterations,
        hash: 'SHA-256'
        },
        passwordKey,
        { name: 'AES-GCM', length: 256 },
        true,
        ['decrypt', 'encrypt']
    );

    // Déchiffrer le ciphertext
    const decryptedBuffer = await crypto.subtle.decrypt(
        { name: 'AES-GCM', iv: iv },
        key,
        ciphertext
    );

    return decoder.decode(decryptedBuffer);
}


const encryptedData = {
    "salt":"VHsLdA8HWVJD0yy+QoZojw==",
    "iv":"9Qk9df2dVrqZUyeM",
    "iterations":100000,
    "ciphertext":"8H/QLWF+X2Iqy7XRTLkTmrt/prMZD+hnyg00wVtE3Uf6Djf42dnDvwGy/nG5wvPt3uVSTdzB7jWnIhICzQCqh8xt1P/vjeNArJ2NXCKYF1AatTFMCb8DbpMzTH3gMYB3q68qSBQjuRNVIkA="
}

// I previously encrypted the key so that it is not disclosed to everyone if somebody find the website.
// This system retrieve the authKey from the password and the encrypted data generated by an encryption function
// You will probably want to get rid of those functions. If you want to do so, kick the encryption utils and the localStorage management down below and just put your key in the authKey variable.
// To find the authentication key, go in the app : User settings -> Authorization cloud key
// Note : the key will change if you change your password.
let authKey = "";

if (localStorage.getItem("pwd") == null) {
    while (true) {
        try {
            const pwd = prompt("Mot de passe :");
            authKey = await decryptAuthKey(pwd, JSON.stringify(encryptedData));
            localStorage.setItem("pwd", pwd);
            break;
        }
        catch {
            console.log("Mot de passe invalide, veuillez réessayer");
        }
    }
} else {
    try {
        authKey = await decryptAuthKey(localStorage.getItem("pwd"), JSON.stringify(encryptedData));
    } catch {
        
    }
}
const serverURI = "https://shelly-35-eu.shelly.cloud";
const devices = [];

// console.log(navigator.geolocation.getCurrentPosition((data) => console.log("geolocation data:", data)));

const infraredTransmitter = document.getElementById("infrared-transmitter")
let lastTimeoutId = null;

let errorBannerTimeout = null;
const errorBanner = document.getElementById("error-banner");

function displayErrorMessage(errorMessage) {
    errorBanner.classList.toggle("hidden", false);
    errorBanner.innerText = errorMessage;
    clearTimeout(errorBannerTimeout);
    errorBannerTimeout = setTimeout(() => errorBanner.classList.toggle("hidden", true), 4000);
}


class Device {
    constructor(name, type, id, htmlID, channel) {
        this.name = name;
        this.type = type;
        this.id = id;
        this.HTMLelement = document.getElementById(htmlID);
        this.channel = channel;
        this.disabled = false;
        devices.push(this);
        this.handleClick = this.handleClick.bind(this);
        this.subscribeClick();
    }

    controlShelly(turn) {
        const data = {
            channel: this.channel,
            turn: turn,
            id: this.id,
            auth_key: authKey
        };
        
        try {
            fetch(`${serverURI}/device/relay/control`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded"
                },
                body: new URLSearchParams(data).toString()
            })
            .then((response) => response.json())
            .then((result) => {
                console.log(result)
                if (!result.isok) {
                    const errors = Object.values(result.errors)
                    const formattedErrorMessages = errors.join(" ")
                    displayErrorMessage(formattedErrorMessages);
                }
            })
            .catch((err) => {
                console.log("Erreur :", err);
            })
        } catch (error) {
            console.error("Erreur :", error);
        }
    }

    handleClick() {
        this.controlShelly("on");
        infraredTransmitter.classList.add("emit");
        clearTimeout(lastTimeoutId);
        lastTimeoutId = setTimeout(() => infraredTransmitter.classList.remove("emit"), 1000);
    }

    subscribeClick() {
        if (this.HTMLelement === null) return;
        this.HTMLelement.addEventListener("click", this.handleClick);
    }
    
    disable() {
        this.disabled = true;
        this.HTMLelement.disabled = true;
        this.HTMLelement.removeEventListener("click", this.handleClick);
    }
    enable() {
        this.disabled = false;
        this.HTMLelement.disabled = false;
    }
}

const gate = new Device("Portail", "gate", "c45bbe79149f", "gate", 0);
const garage1 = new Device("Garage gauche", "garage", "unknown", "garage-1", 0);
const garage2 = new Device("Garage droit", "garage", "unknown", "garage-2", 0);
garage1.disable();
garage2.disable();
